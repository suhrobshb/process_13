# Production-Ready Docker Compose for the AI Engine Platform
#
# This configuration file orchestrates all the necessary services for a robust,
# scalable, and secure production deployment. It is optimized for performance
# and reliability.
#
# To run this configuration:
# 1. Ensure you have an `.env` file with all required environment variables.
# 2. Run the command: `docker-compose -f docker-compose.prod.yml up --build -d`
#
version: '3.8'

# Define a custom bridge network for secure inter-service communication.
networks:
  ai_engine_net:
    driver: bridge

# Define named volumes for persistent data storage.
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

services:
  # -------------------------------------------------------------------------- #
  #  1. PostgreSQL Database Service
  # -------------------------------------------------------------------------- #
  db:
    image: postgres:15-alpine
    container_name: ai_engine_db
    restart: unless-stopped
    volumes:
      # Persist database data on the host machine.
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai_engine_net
    environment:
      # Credentials and database name are loaded from the .env file.
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-ai_engine}
    healthcheck:
      # Ensures the database is ready to accept connections before dependent services start.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_engine}"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      # Expose port 5432 only to other services on the internal network.
      - "5432"

  # -------------------------------------------------------------------------- #
  #  2. Redis Service for Caching and Message Brokering
  # -------------------------------------------------------------------------- #
  redis:
    image: redis:7-alpine
    container_name: ai_engine_redis
    restart: unless-stopped
    volumes:
      # Persist Redis data.
      - redis_data:/data
    networks:
      - ai_engine_net
    healthcheck:
      # Ensures Redis is responsive before the backend and worker start.
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "6379"

  # -------------------------------------------------------------------------- #
  #  3. Backend FastAPI Application Service
  # -------------------------------------------------------------------------- #
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ai_engine_backend
    restart: unless-stopped
    env_file: .env
    networks:
      - ai_engine_net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Use Gunicorn as the production-grade application server.
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker ai_engine.main:app -b 0.0.0.0:8000
    expose:
      - "8000"

  # -------------------------------------------------------------------------- #
  #  4. Celery Worker for Background Task Processing
  # -------------------------------------------------------------------------- #
  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend # Reuses the same image as the backend for consistency.
    container_name: ai_engine_worker
    restart: unless-stopped
    env_file: .env
    networks:
      - ai_engine_net
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    # Command to start the Celery worker, processing tasks from the 'default' queue.
    command: celery -A ai_engine.worker_app.celery_app worker --loglevel=info -c 2

  # -------------------------------------------------------------------------- #
  #  5. Frontend Service (React App served by Nginx)
  # -------------------------------------------------------------------------- #
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ai_engine_frontend
    restart: unless-stopped
    networks:
      - ai_engine_net
    ports:
      # Map host ports 80 and 443 to the container for web traffic.
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    # To enable SSL, uncomment the volumes below and provide your certificate files
    # and a production Nginx configuration.
    # volumes:
    #   - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    #   - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
