# Production-Ready Nginx Configuration for the AI Engine Platform
#
# This configuration file is designed to be used in a production environment,
# typically within the Nginx container defined in `docker-compose.prod.yml`.
#
# It handles:
# 1. Serving the static React frontend application.
# 2. Reverse proxying API requests to the FastAPI backend.
# 3. Correctly handling and proxying WebSocket connections for real-time features.
# 4. Applying essential security headers.
# 5. Basic performance tuning and logging.

# Defines the user and the number of worker processes. 'auto' is generally recommended.
user nginx;
worker_processes auto;

# Configures the error log and process ID file locations.
error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Includes standard MIME type definitions.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configures the format for access logs.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Enables more efficient file serving.
    sendfile on;
    # Optimizes packet delivery.
    tcp_nopush on;

    # Sets a timeout for keep-alive connections with the client.
    keepalive_timeout 65;

    # Enables Gzip compression to reduce the size of transferred data.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define an upstream for the backend API service for better management.
    # The name 'backend' should match the service name in docker-compose.yml.
    upstream backend_api {
        server backend:8000;
    }

    # Main server block for handling HTTP requests on port 80.
    server {
        listen 80;
        server_name localhost; # Replace with your domain in production

        # Sets the maximum allowed size of the client request body.
        client_max_body_size 20M;

        # --- Security Headers ---
        # Prevents clickjacking attacks by disallowing the site to be framed.
        add_header X-Frame-Options "SAMEORIGIN" always;
        # Prevents browsers from MIME-sniffing the content type.
        add_header X-Content-Type-Options "nosniff" always;
        # Enables XSS filtering in browsers.
        add_header X-XSS-Protection "1; mode=block" always;
        # Controls what information is sent in the Referer header.
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        # Sets Content Security Policy (CSP). This is a strict example; adjust as needed.
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; connect-src 'self' ws: wss:;" always;

        # --- Location for serving the static React frontend ---
        location / {
            # The root directory where the built frontend files are located.
            # This path matches the one in Dockerfile.frontend.
            root /usr/share/nginx/html;
            # Specifies the default file to serve.
            index index.html index.htm;
            # This is crucial for single-page applications (SPAs) like React.
            # It tries to serve the requested file, and if it doesn't exist,
            # it falls back to serving index.html, allowing the client-side
            # router to handle the URL.
            try_files $uri $uri/ /index.html;
        }

        # --- Location for reverse proxying API requests ---
        location /api/ {
            # Forward requests to the backend API upstream group.
            proxy_pass http://backend_api;
            # Set headers to pass important information to the backend.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Location for handling WebSocket connections ---
        location /ws/ {
            # Forward requests to the backend API.
            proxy_pass http://backend_api;
            # These headers are required to upgrade the connection to WebSocket.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            # Increase timeouts for long-lived WebSocket connections.
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # --- Optional: Error pages ---
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # --- Production HTTPS Server Block (Example) ---
    # To enable HTTPS in production, uncomment and configure this block.
    # You will need to obtain SSL certificates (e.g., using Let's Encrypt / Certbot).
    #
    # server {
    #     listen 443 ssl http2;
    #     server_name your_domain.com;
    #
    #     # Path to your SSL certificate and private key.
    #     ssl_certificate /etc/nginx/ssl/live/your_domain.com/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/ssl/live/your_domain.com/privkey.pem;
    #
    #     # Modern SSL/TLS configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    #     ssl_prefer_server_ciphers off;
    #
    #     # Add HSTS header for enhanced security.
    #     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    #
    #     # Include the same location blocks as the HTTP server block above.
    #     location / { ... }
    #     location /api/ { ... }
    #     location /ws/ { ... }
    # }
}
