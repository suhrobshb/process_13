worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate Limiting
    # Limit to 5 requests per second per IP
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/s;

    # Upstream servers for load balancing
    upstream api {
        server api:8000;
        # Basic passive health check: if a server fails 3 times in 30 seconds, it's considered down for 10 seconds
        # This is default behavior for Nginx open source when using proxy_next_upstream
    }

    upstream dashboard {
        server dashboard:3000;
        # Basic passive health check
    }

    # HTTP to HTTPS redirection
    server {
        listen 80;
        listen [::]:80;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

        # Certbot verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS Server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

        # SSL/TLS Configuration
        ssl_certificate /etc/nginx/ssl/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/${DOMAIN_NAME}/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Security Headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://*.${DOMAIN_NAME}; frame-ancestors 'none';" always;

        # Rate Limiting for all requests
        limit_req zone=mylimit burst=10 nodelay;

        # API Routing
        location /api/ {
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            # Passive health check: if upstream returns 5xx, try next upstream
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            
            # Health check endpoint
            location /api/health {
                proxy_pass http://api/health;
                # Don't apply rate limiting to health checks
                limit_req off;
                # Allow internal health checks
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }

        # Agent API Routing (e.g., for recording control)
        location /agent-api/ {
            proxy_pass http://api:8001; # Assuming agent control runs on port 8001 of the API service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        }

        # Static files
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            access_log off;
        }

        # Dashboard Routing (everything not matching other locations)
        location / {
            proxy_pass http://dashboard;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            
            # Health check endpoint for dashboard
            location /api/health {
                proxy_pass http://dashboard/api/health;
                limit_req off;
                # Allow internal health checks
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }
    }
}
