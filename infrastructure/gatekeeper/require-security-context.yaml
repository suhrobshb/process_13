apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiresecuritycontext
  annotations:
    metadata.gatekeeper.sh/title: "Require Security Context"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Requires containers to run with a non-root user and to have
      a read-only root filesystem when possible.
spec:
  crd:
    spec:
      names:
        kind: K8sRequireSecurityContext
      validation:
        type: object
        properties:
          runAsNonRoot:
            description: "Require containers to run as non-root user"
            type: boolean
          readOnlyRootFilesystem:
            description: "Require read-only root filesystem"
            type: boolean
          allowPrivilegeEscalation:
            description: "Allow privilege escalation"
            type: boolean
          exemptImages:
            description: "List of exempt container images"
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiresecuritycontext
        
        import rego.v1
        
        violation[{"msg": msg}] if {
            container := input.review.object.spec.containers[_]
            not exempt_image(container.image)
            input.parameters.runAsNonRoot
            not container.securityContext.runAsNonRoot
            msg := sprintf("Container %v must run as non-root user", [container.name])
        }
        
        violation[{"msg": msg}] if {
            container := input.review.object.spec.containers[_]
            not exempt_image(container.image)
            input.parameters.readOnlyRootFilesystem
            not container.securityContext.readOnlyRootFilesystem
            msg := sprintf("Container %v must have read-only root filesystem", [container.name])
        }
        
        violation[{"msg": msg}] if {
            container := input.review.object.spec.containers[_]
            not exempt_image(container.image)
            not input.parameters.allowPrivilegeEscalation
            container.securityContext.allowPrivilegeEscalation
            msg := sprintf("Container %v must not allow privilege escalation", [container.name])
        }
        
        violation[{"msg": msg}] if {
            container := input.review.object.spec.initContainers[_]
            not exempt_image(container.image)
            input.parameters.runAsNonRoot
            not container.securityContext.runAsNonRoot
            msg := sprintf("Init container %v must run as non-root user", [container.name])
        }
        
        exempt_image(image) if {
            exempt_pattern := input.parameters.exemptImages[_]
            glob.match(exempt_pattern, [], image)
        }

---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sRequireSecurityContext
metadata:
  name: require-security-context
  namespace: gatekeeper-system
spec:
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system"]
      kinds:
        - apiGroups: [""]
          kinds: ["Pod"]
        - apiGroups: ["apps"]
          kinds: ["Deployment", "ReplicaSet", "DaemonSet", "StatefulSet"]
  parameters:
    runAsNonRoot: true
    readOnlyRootFilesystem: false  # Some apps need writable filesystem
    allowPrivilegeEscalation: false
    exemptImages:
      - "registry.k8s.io/pause:*"
      - "k8s.gcr.io/pause:*"