version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.53.1
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      - redis_exporter
      - postgres_exporter
      - nginx_exporter
      - celery_exporter
      - node_exporter
      - cadvisor
      - docker_exporter
    restart: unless-stopped
    networks:
      - monitoring
      - backend # To scrape metrics from the 'api' service in the main stack

  grafana:
    image: grafana/grafana:11.1.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring

  redis_exporter:
    image: oliver006/redis_exporter:v1.43.0
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      - redis # Assuming redis service is in the main docker-compose file
    restart: unless-stopped
    networks:
      - monitoring
      - backend # To connect to the redis service

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - db # Assuming db service is in the main docker-compose file
    restart: unless-stopped
    networks:
      - monitoring
      - backend # To connect to the db service

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:1.3.0
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "9113:9113"
    depends_on:
      - nginx # Assuming nginx service is in the main docker-compose file
    restart: unless-stopped
    networks:
      - monitoring
      - frontend # To connect to the nginx service

  celery_exporter:
    image: willdurand/celery-exporter:latest
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "9540:9540"
    depends_on:
      - redis # Assuming redis service is in the main docker-compose file
    restart: unless-stopped
    networks:
      - monitoring
      - backend # To connect to the redis service

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    privileged: true
    restart: unless-stopped
    networks:
      - monitoring

  docker_exporter:
    image: stefanprodan/caddy-docker-exporter
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "9323:9323"
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  monitoring:
    driver: bridge
  backend:
    external: true # Connects to the 'backend' network defined in the main docker-compose file
  frontend:
    external: true # Connects to the 'frontend' network defined in the main docker-compose file
