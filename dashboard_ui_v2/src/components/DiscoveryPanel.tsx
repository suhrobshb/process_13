import React from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiClient, AutomationSuggestion } from "@/lib/api-client";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Lightbulb,
  AlertCircle,
  Zap,
  Clock,
  TrendingUp,
  DollarSign,
  Target,
  CheckCircle,
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

// --- Helper Components for Visualization ---

/**
 * A small helper component to visualize a priority score as a colored bar.
 * The color changes based on the score's magnitude.
 */
const ScoreVisualizer = ({ score }: { score: number }) => {
  const maxScoreForVisualization = 200;
  const percentage = Math.min(100, (score / maxScoreForVisualization) * 100);

  let colorClass = "bg-green-500";
  if (percentage < 60) colorClass = "bg-yellow-500";
  if (percentage < 30) colorClass = "bg-orange-500";

  return (
    <div className="w-full bg-muted rounded-full h-2">
      <div
        className={`${colorClass} h-2 rounded-full transition-all duration-500`}
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
};

/**
 * A reusable card for displaying a single key metric on the ROI dashboard.
 */
const StatCard = ({ title, value, icon: Icon, description }) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
      <Icon className="h-4 w-4 text-muted-foreground" />
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
      <p className="text-xs text-muted-foreground">{description}</p>
    </CardContent>
  </Card>
);


// --- Main Discovery Panel Component ---

/**
 * An advanced panel that serves as the user's central hub for AI-driven insights.
 * It combines two key functionalities into a tabbed interface:
 * 1.  **Automation Suggestions**: Proactively identifies and recommends repetitive
 *     tasks that are prime candidates for automation.
 * 2.  **ROI Dashboard**: Visualizes the tangible business value generated by
 *     automations, such as time and cost savings.
 */
export function DiscoveryPanel() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // --- Data Fetching using TanStack Query ---

  // Query for fetching personalized automation suggestions.
  const suggestionsQuery = useQuery({
    queryKey: ["automationSuggestions"],
    queryFn: () => apiClient.getAutomationSuggestions(),
  });

  // Query for fetching ROI and other key performance indicators.
  // This assumes an `getRoiMetrics` method exists in the apiClient.
  const roiMetricsQuery = useQuery({
    queryKey: ["roiMetrics"],
    queryFn: () => apiClient.getRoiMetrics(), // Assumed API method
  });

  // --- Mutations ---

  // Mutation for the "Generate Workflow" action.
  const generateWorkflowMutation = useMutation({
    mutationFn: (suggestion: AutomationSuggestion) => {
      // This would call an API endpoint to auto-generate a draft workflow.
      // For this demo, we'll simulate it.
      console.log("Generating workflow for:", suggestion.title);
      return new Promise((resolve) => setTimeout(resolve, 1500));
    },
    onSuccess: () => {
      toast({
        title: "Workflow Generation Started",
        description: "A new draft workflow has been created. You can find it on the Workflows page.",
      });
      // Invalidate the main workflows query to ensure the new draft appears.
      queryClient.invalidateQueries({ queryKey: ["workflows"] });
    },
    onError: (err: Error) => {
      toast({
        title: "Generation Failed",
        description: err.message,
        variant: "destructive",
      });
    },
  });

  const handleGenerateClick = (suggestion: AutomationSuggestion) => {
    generateWorkflowMutation.mutate(suggestion);
  };

  // --- Render Logic ---

  return (
    <Tabs defaultValue="suggestions" className="w-full">
      <TabsList className="grid w-full grid-cols-2">
        <TabsTrigger value="suggestions">Automation Suggestions</TabsTrigger>
        <TabsTrigger value="roi">ROI Dashboard</TabsTrigger>
      </TabsList>

      {/* --- Suggestions Tab Content --- */}
      <TabsContent value="suggestions">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-6 w-6 text-yellow-500" />
              <span>Your Top Automation Opportunities</span>
            </CardTitle>
            <CardDescription>
              Our AI has analyzed your recent activity to find these repetitive tasks.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {suggestionsQuery.isLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-24 w-full" />
                <Skeleton className="h-24 w-full" />
              </div>
            ) : suggestionsQuery.isError ? (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error Loading Suggestions</AlertTitle>
                <AlertDescription>
                  {(suggestionsQuery.error as Error).message}
                </AlertDescription>
              </Alert>
            ) : !suggestionsQuery.data || suggestionsQuery.data.length === 0 ? (
              <div className="text-center py-12">
                <p className="text-muted-foreground">No suggestions found yet.</p>
                <p className="text-sm text-muted-foreground mt-2">
                  As you work, our AI will learn your patterns and suggest automations here!
                </p>
              </div>
            ) : (
              <ul className="space-y-4">
                {suggestionsQuery.data.map((suggestion: AutomationSuggestion, index: number) => (
                  <li
                    key={index}
                    className="p-4 border rounded-lg flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 transition-all hover:shadow-md"
                  >
                    <div className="flex-grow w-full">
                      <p className="font-semibold">{suggestion.title}</p>
                      <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-sm text-muted-foreground mt-2">
                        <span className="flex items-center gap-1"><TrendingUp className="h-4 w-4" /> {suggestion.frequency} times this week</span>
                        <span className="flex items-center gap-1"><Clock className="h-4 w-4" /> Est. {suggestion.estimated_time_saved_str}</span>
                      </div>
                      <div className="mt-3">
                        <div className="flex justify-between items-center mb-1">
                          <span className="text-xs font-medium text-muted-foreground">Priority Score</span>
                          <span className="text-xs font-bold">{suggestion.priority_score}</span>
                        </div>
                        <ScoreVisualizer score={suggestion.priority_score} />
                      </div>
                    </div>
                    <Button
                      size="sm"
                      onClick={() => handleGenerateClick(suggestion)}
                      disabled={generateWorkflowMutation.isPending}
                      className="flex-shrink-0 w-full sm:w-auto mt-3 sm:mt-0"
                    >
                      <Zap className="mr-2 h-4 w-4" />
                      Generate Workflow
                    </Button>
                  </li>
                ))}
              </ul>
            )}
          </CardContent>
        </Card>
      </TabsContent>

      {/* --- ROI Tab Content --- */}
      <TabsContent value="roi">
        <Card>
          <CardHeader>
            <CardTitle>Return on Investment (ROI) Dashboard</CardTitle>
            <CardDescription>
              Measuring the tangible value your automations are delivering.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {roiMetricsQuery.isLoading ? (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                  <Skeleton className="h-28 w-full" />
                  <Skeleton className="h-28 w-full" />
                  <Skeleton className="h-28 w-full" />
                  <Skeleton className="h-28 w-full" />
              </div>
            ) : roiMetricsQuery.isError ? (
               <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error Loading ROI Metrics</AlertTitle>
                <AlertDescription>
                  {(roiMetricsQuery.error as Error).message}
                </AlertDescription>
              </Alert>
            ) : (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <StatCard
                  title="Total Hours Saved"
                  value={`${roiMetricsQuery.data?.hours_saved.toFixed(1) || '0.0'}`}
                  icon={Clock}
                  description="Estimated time returned to your team."
                />
                <StatCard
                  title="Estimated Cost Saved"
                  value={`$${roiMetricsQuery.data?.cost_saved.toLocaleString('en-US', { maximumFractionDigits: 0 }) || '0'}`}
                  icon={DollarSign}
                  description="Based on average FTE cost."
                />
                <StatCard
                  title="Automations Run"
                  value={`${roiMetricsQuery.data?.automations_run || '0'}`}
                  icon={Target}
                  description="Total successful workflow executions."
                />
                <StatCard
                  title="Success Rate"
                  value={`${roiMetricsQuery.data?.success_rate.toFixed(1) || '100.0'}%`}
                  icon={CheckCircle}
                  description="Of all triggered automations."
                />
              </div>
            )}
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>
  );
}
