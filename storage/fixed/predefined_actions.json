{
  "version": "1.0",
  "categories": {
    "http": {
      "title": "HTTP Requests",
      "description": "Actions for interacting with external APIs and web services",
      "actions": [
        {
          "id": "http_get_json",
          "name": "GET JSON Data",
          "description": "Fetch JSON data from a REST API endpoint",
          "type": "http",
          "params": {
            "url": "https://api.example.com/data",
            "method": "GET",
            "headers": {
              "Accept": "application/json",
              "Content-Type": "application/json"
            },
            "timeout": 30,
            "verify_ssl": true
          }
        },
        {
          "id": "http_post_json",
          "name": "POST JSON Data",
          "description": "Send JSON data to a REST API endpoint",
          "type": "http",
          "params": {
            "url": "https://api.example.com/data",
            "method": "POST",
            "headers": {
              "Accept": "application/json",
              "Content-Type": "application/json"
            },
            "json": {
              "key": "value"
            },
            "timeout": 30,
            "verify_ssl": true
          }
        },
        {
          "id": "http_webhook_notification",
          "name": "Send Webhook Notification",
          "description": "Send a notification to a webhook URL",
          "type": "http",
          "params": {
            "url": "https://hooks.slack.com/services/YOUR_WEBHOOK_PATH",
            "method": "POST",
            "headers": {
              "Content-Type": "application/json"
            },
            "json": {
              "text": "Workflow notification: ${message}"
            },
            "timeout": 10,
            "verify_ssl": true
          }
        },
        {
          "id": "http_download_file",
          "name": "Download File",
          "description": "Download a file from a URL",
          "type": "http",
          "params": {
            "url": "https://example.com/files/document.pdf",
            "method": "GET",
            "headers": {},
            "timeout": 60,
            "verify_ssl": true,
            "stream": true
          }
        },
        {
          "id": "http_api_auth",
          "name": "Authenticated API Request",
          "description": "Make an authenticated request to an API",
          "type": "http",
          "params": {
            "url": "https://api.example.com/protected-resource",
            "method": "GET",
            "headers": {
              "Authorization": "Bearer ${api_token}",
              "Accept": "application/json"
            },
            "timeout": 30,
            "verify_ssl": true
          }
        }
      ]
    },
    "shell": {
      "title": "Shell Commands",
      "description": "Actions for executing shell commands and scripts",
      "actions": [
        {
          "id": "shell_list_files",
          "name": "List Files",
          "description": "List files in a directory",
          "type": "shell",
          "params": {
            "command": "ls -la ${directory:-./}",
            "timeout": 10,
            "shell": true
          }
        },
        {
          "id": "shell_git_clone",
          "name": "Git Clone",
          "description": "Clone a Git repository",
          "type": "shell",
          "params": {
            "command": "git clone ${repository_url} ${target_directory:-./repo}",
            "timeout": 300,
            "shell": true
          }
        },
        {
          "id": "shell_run_script",
          "name": "Run Script",
          "description": "Execute a script file",
          "type": "shell",
          "params": {
            "command": "bash ${script_path} ${arguments:-}",
            "timeout": 120,
            "shell": true
          }
        },
        {
          "id": "shell_system_info",
          "name": "System Information",
          "description": "Get system information",
          "type": "shell",
          "params": {
            "command": "uname -a && df -h && free -m",
            "timeout": 10,
            "shell": true
          }
        },
        {
          "id": "shell_process_csv",
          "name": "Process CSV File",
          "description": "Process a CSV file using command line tools",
          "type": "shell",
          "params": {
            "command": "cat ${csv_file} | awk -F, '${awk_pattern:-print $0}'",
            "timeout": 30,
            "shell": true
          }
        },
        {
          "id": "shell_backup_file",
          "name": "Backup File",
          "description": "Create a backup of a file",
          "type": "shell",
          "params": {
            "command": "cp ${source_file} ${source_file}.backup-$(date +%Y%m%d-%H%M%S)",
            "timeout": 30,
            "shell": true
          }
        }
      ]
    },
    "llm": {
      "title": "Language Model Actions",
      "description": "Actions for text generation and processing using language models",
      "actions": [
        {
          "id": "llm_summarize_text",
          "name": "Summarize Text",
          "description": "Generate a concise summary of a longer text",
          "type": "llm",
          "params": {
            "provider": "openai",
            "model": "gpt-4",
            "prompt": "Please summarize the following text in a concise way, highlighting the key points:\n\n${text_to_summarize}",
            "temperature": 0.3,
            "max_tokens": 300
          }
        },
        {
          "id": "llm_generate_email",
          "name": "Generate Email",
          "description": "Generate a professional email based on key points",
          "type": "llm",
          "params": {
            "provider": "openai",
            "model": "gpt-4",
            "prompt": "Write a professional email with the following details:\n- Recipient: ${recipient}\n- Subject: ${subject}\n- Key points: ${key_points}\n- Tone: ${tone:-professional}\n\nPlease format it as a complete email with greeting and signature.",
            "temperature": 0.7,
            "max_tokens": 500
          }
        },
        {
          "id": "llm_classify_content",
          "name": "Classify Content",
          "description": "Classify content into predefined categories",
          "type": "llm",
          "params": {
            "provider": "openai",
            "model": "gpt-4",
            "prompt": "Classify the following content into one of these categories: ${categories}.\n\nContent: ${content}\n\nReturn only the category name without explanation.",
            "temperature": 0.2,
            "max_tokens": 50
          }
        },
        {
          "id": "llm_chat_completion",
          "name": "Chat Completion (Structured JSON)",
          "description": "Use an LLM to generate a structured JSON response based on a prompt",
          "type": "llm",
          "params": {
            "provider": "openai",
            "model": "gpt-4o-mini",
            "prompt": [
              { "role": "system", "content": "You are a data extraction assistant that returns JSON." },
              { "role": "user", "content": "Extract name and email from the following text:\n${input_text}" }
            ],
            "temperature": 0.1,
            "max_tokens": 150,
            "response_format": "json_object"
          }
        },
        {
          "id": "llm_context_aware_query",
          "name": "Context-Aware Query (RAG)",
          "description": "Ask a question against your documents for a context-aware answer.",
          "type": "llm",
          "params": {
            "provider": "openai",
            "model": "gpt-4",
            "prompt": "Based on the provided context, what were the key findings of the Q2 2025 financial report?",
            "rag_params": {
              "query": "key findings of Q2 2025 financial report",
              "data_source_ids": ["${report_source_id}"]
            }
          }
        }
      ]
    },
    "decision": {
      "title": "Decision Actions",
      "description": "Actions for making decisions and controlling workflow paths",
      "actions": [
        {
          "id": "decision_simple_condition",
          "name": "Simple Condition",
          "description": "Evaluate a simple condition and choose a path",
          "type": "decision",
          "params": {
            "conditions": [
              {
                "expression": "${value} > ${threshold}",
                "target": "high_value_path"
              },
              {
                "expression": "${value} <= ${threshold}",
                "target": "low_value_path"
              }
            ],
            "default": "default_path"
          }
        },
        {
          "id": "decision_multi_branch",
          "name": "Multi-Branch Decision",
          "description": "Choose between multiple paths based on conditions",
          "type": "decision",
          "params": {
            "conditions": [
              {
                "expression": "${status} == 'success'",
                "target": "success_path"
              },
              {
                "expression": "${status} == 'failure'",
                "target": "failure_path"
              },
              {
                "expression": "${status} == 'pending'",
                "target": "retry_path"
              }
            ],
            "default": "unknown_status_path"
          }
        }
      ]
    },
    "rag_decision": {
      "title": "AI-Powered Decisions (RAG)",
      "description": "Make intelligent decisions using context from your documents.",
      "actions": [
        {
          "id": "rag_decision_risk_assessment",
          "name": "AI Risk Assessment",
          "description": "Assess risk from documents and decide on a path.",
          "type": "rag_decision",
          "params": {
            "query": "Based on the attached financial report, is this project high-risk, medium-risk, or low-risk?",
            "data_source_ids": ["${report_source_id}"],
            "outcomes": ["high_risk", "medium_risk", "low_risk"],
            "llm_params": {
              "provider": "openai",
              "model": "gpt-4o-mini"
            }
          }
        }
      ]
    },
    "approval": {
      "title": "Approval Actions",
      "description": "Actions for human-in-the-loop approvals",
      "actions": [
        {
          "id": "approval_basic",
          "name": "Basic Approval",
          "description": "Request a basic approval from a user",
          "type": "approval",
          "params": {
            "title": "Approval Required",
            "description": "Please review and approve this workflow step.",
            "approvers": ["${approver_email}"],
            "timeout_hours": 24,
            "notification_method": "email",
            "wait": true
          }
        },
        {
          "id": "approval_deployment",
          "name": "Deployment Approval",
          "description": "Request approval for a deployment",
          "type": "approval",
          "params": {
            "title": "Deployment Approval: ${environment}",
            "description": "Please review and approve the deployment to ${environment} environment.\n\nChanges included:\n${changes_description}",
            "approvers": ["${team_lead_email}", "${manager_email}"],
            "required_approvals": 1,
            "timeout_hours": 24,
            "notification_method": "slack",
            "wait": true
          }
        }
      ]
    },
    "desktop": {
      "title": "Desktop Automation",
      "description": "Actions for automating desktop interactions with PyAutoGUI",
      "actions": [
        {
          "id": "desktop_click_sequence",
          "name": "Click Sequence",
          "description": "Perform a sequence of mouse clicks on screen coordinates",
          "type": "desktop",
          "params": {
            "actions": [
              { "type": "click", "x": 200, "y": 300, "button": "left", "clicks": 1 },
              { "type": "wait", "duration": 0.5 },
              { "type": "double_click", "x": 450, "y": 320 }
            ],
            "timeout": 30
          }
        },
        {
          "id": "desktop_type_text",
          "name": "Type Text",
          "description": "Open an application (assumed focused) and type text",
          "type": "desktop",
          "params": {
            "actions": [
              { "type": "hotkey", "keys": ["ctrl", "n"] },
              { "type": "wait", "duration": 1 },
              { "type": "type", "text": "Automated text typed by AI Engine!", "interval": 0.05 }
            ],
            "timeout": 45
          }
        }
      ]
    },
    "browser": {
      "title": "Browser Automation",
      "description": "Actions for automating browsers using Playwright",
      "actions": [
        {
          "id": "browser_fill_login_form",
          "name": "Fill Login Form",
          "description": "Navigate to a URL, fill a login form, and submit",
          "type": "browser",
          "params": {
            "browser_type": "chromium",
            "headless": true,
            "actions": [
              { "type": "goto", "url": "https://example.com/login" },
              { "type": "fill", "selector": "#username", "text": "${username}" },
              { "type": "fill", "selector": "#password", "text": "${password}" },
              { "type": "click", "selector": "button[type='submit']" },
              { "type": "wait_for_navigation", "wait_until": "networkidle" },
              { "type": "screenshot", "filename": "after_login.png" }
            ],
            "timeout": 90
          }
        }
      ]
    }
  }
}
