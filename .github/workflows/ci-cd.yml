name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pre-commit black isort flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
    
    - name: Install frontend dependencies
      run: |
        cd dashboard_ui_v2
        pnpm install --frozen-lockfile
    
    - name: Python Code Formatting (Black)
      run: black --check --diff ai_engine/ || echo "Black formatting issues found"
      continue-on-error: true
    
    - name: Python Import Sorting (isort)
      run: isort --check-only --diff ai_engine/ || echo "isort issues found"
      continue-on-error: true
    
    - name: Python Linting (Flake8)
      run: flake8 ai_engine/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Flake8 issues found"
      continue-on-error: true
    
    - name: Python Type Checking (MyPy)
      run: mypy ai_engine/ --ignore-missing-imports || echo "MyPy issues found"
      continue-on-error: true
    
    - name: Python Security Scan (Bandit)
      run: bandit -r ai_engine/ -f json -o bandit-report.json || echo "Bandit issues found"
      continue-on-error: true
    
    - name: Python Dependency Security Scan
      run: safety check --json --output safety-report.json || echo "Safety issues found"
      continue-on-error: true
    
    - name: Frontend Linting (ESLint)
      run: |
        cd dashboard_ui_v2
        pnpm run lint
    
    - name: Frontend Formatting (Prettier)
      run: |
        cd dashboard_ui_v2
        pnpm run format:check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autoops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        python tests/test_comprehensive_fixed.py
        python tests/test_dependency_fixes.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/autoops_test
        REDIS_URL: redis://localhost:6379/0
    
    - name: Run integration tests
      run: |
        python tests/test_integration_suite.py

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
    
    - name: Install frontend dependencies
      run: |
        cd dashboard_ui_v2
        pnpm install --frozen-lockfile
    
    - name: Run frontend tests
      run: |
        cd dashboard_ui_v2
        pnpm run test:ci
    
    - name: Build frontend
      run: |
        cd dashboard_ui_v2
        pnpm run build

  coverage-report:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Generate coverage report
      run: |
        python tests/test_coverage_reporter.py
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          comprehensive_test_coverage_report.json
          integration_test_report.json
