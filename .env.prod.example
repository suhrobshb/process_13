# Production Environment Variables Example
#
# This file contains all necessary environment variables for deploying the
# AI Engine to a production environment using Docker Compose.
#
# IMPORTANT: Do NOT commit this file with sensitive information to version control.
# Create a separate .env.prod file and keep it secure.

# -----------------------------------------------------------------------------
# 1. Database Configuration (PostgreSQL)
# -----------------------------------------------------------------------------
# PostgreSQL database name
POSTGRES_DB=ai_engine_prod
# PostgreSQL database user
POSTGRES_USER=ai_engine_user
# PostgreSQL database password (CHANGE THIS TO A STRONG, UNIQUE PASSWORD)
# For production, use secrets manager instead of plain text
POSTGRES_PASSWORD=***REPLACE_WITH_STRONG_PASSWORD***
# Database connection URL (constructed from above values)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

# -----------------------------------------------------------------------------
# 2. Redis Configuration
# -----------------------------------------------------------------------------
# Redis password (CHANGE THIS TO A STRONG, UNIQUE PASSWORD)
# For production, use secrets manager instead of plain text
REDIS_PASSWORD=***REPLACE_WITH_STRONG_PASSWORD***
# Redis connection URLs
REDIS_URL=redis://redis:6379/1
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# -----------------------------------------------------------------------------
# 3. Authentication & Security
# -----------------------------------------------------------------------------
# Secret key for JWT token generation (CHANGE THIS TO A LONG, RANDOM STRING)
# Generate with: openssl rand -hex 32
# For production, use secrets manager instead of plain text
SECRET_KEY=***REPLACE_WITH_SECURE_KEY***
# JWT token expiration time in minutes
ACCESS_TOKEN_EXPIRE_MINUTES=30

# -----------------------------------------------------------------------------
# 4. External API Keys
# -----------------------------------------------------------------------------
# OpenAI API Key (required for LLMRunner functionality)
# Get yours from: https://platform.openai.com/account/api-keys
# For production, use secrets manager instead of plain text
OPENAI_API_KEY=***REPLACE_WITH_ACTUAL_KEY***

# -----------------------------------------------------------------------------
# 5. Domain and Network Configuration
# -----------------------------------------------------------------------------
# Your public domain name for Nginx and Dashboard (e.g., your-app.com)
# This is crucial for Nginx SSL setup and dashboard API routing.
DOMAIN_NAME=your-domain.com

# -----------------------------------------------------------------------------
# 6. Monitoring Configuration (Grafana)
# -----------------------------------------------------------------------------
# Grafana admin username
GRAFANA_ADMIN_USER=admin
# Grafana admin password (CHANGE THIS TO A STRONG, UNIQUE PASSWORD)
GRAFANA_ADMIN_PASSWORD=your_secure_grafana_password_here
# Grafana root URL (usually matches your public domain for Grafana)
# If Grafana is exposed directly, it might be https://${DOMAIN_NAME}/grafana
GRAFANA_ROOT_URL=http://localhost:3000

# -----------------------------------------------------------------------------
# 7. Docker Image Tags
# -----------------------------------------------------------------------------
# These are used by CI/CD pipeline to specify which image versions to deploy
API_IMAGE_TAG=latest
DASHBOARD_IMAGE_TAG=latest

# -----------------------------------------------------------------------------
# 8. Logging Configuration
# -----------------------------------------------------------------------------
# Set to INFO, WARNING, ERROR, DEBUG
LOG_LEVEL=INFO

# -----------------------------------------------------------------------------
# 9. Agent Configuration
# -----------------------------------------------------------------------------
# Directory where agent recordings will be stored within the container
AGENT_OUTPUT_DIR=/app/recordings

# URL for the task upload endpoint (usually the API service's internal URL)
TASK_UPLOAD_URL=http://api:8000/api/tasks/upload

# -----------------------------------------------------------------------------
# 10. Optional Integrations (Uncomment and configure if needed)
# -----------------------------------------------------------------------------
# Slack Webhook URL for CI/CD notifications
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX

# Twilio Account SID and Auth Token for SMS/Voice notifications
# TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# TWILIO_AUTH_TOKEN=your_twilio_auth_token
# TWILIO_PHONE_NUMBER=+1234567890

# -----------------------------------------------------------------------------
# 11. Google Cloud Deployment Configuration
# -----------------------------------------------------------------------------
# Google Cloud project ID and region used by deploy-gcp.sh / CI pipeline
GCP_PROJECT_ID=your-gcp-project-id
GCP_REGION=us-central1
GCP_SERVICE_ACCOUNT=ai-engine-sa
# Image tag override (if CI pushes SHA-based tags)
DEPLOYMENT_ID=$(date +%Y%m%d%H%M%S)

# -----------------------------------------------------------------------------
# 12. Monitoring & Observability
# -----------------------------------------------------------------------------
# Enable/disable Prometheus metrics exposition
ENABLE_METRICS=true
# Scrape interval override for prometheus-fastapi-instrumentator (seconds)
PROMETHEUS_SCRAPE_INTERVAL=15
# Pushgateway URL (if using push-based metrics)
# PROMETHEUS_PUSHGATEWAY_URL=http://pushgateway:9091

# Structured logging options
LOG_FORMAT=json                # json | text
ENABLE_AUDIT_LOG=true          # Include HTTP audit logs

# -----------------------------------------------------------------------------
# 13. Security Headers & CORS
# -----------------------------------------------------------------------------
# Comma-separated list of origins allowed to call the API (use * for all)
ALLOWED_ORIGINS=https://your-domain.com,https://app.your-domain.com
# Enable extra security headers middleware
SECURITY_HEADERS_ENABLED=true

# -----------------------------------------------------------------------------
# 14. Feature Flags (Enhanced Runners)
# -----------------------------------------------------------------------------
# Toggle desktop and browser automation runners in production
ENABLE_DESKTOP_AUTOMATION=false     # Requires X11 permissions
ENABLE_BROWSER_AUTOMATION=true      # Playwright headless mode
# Playwright browser settings
PLAYWRIGHT_BROWSER_TYPE=chromium    # chromium | firefox | webkit
PLAYWRIGHT_HEADLESS=true

# -----------------------------------------------------------------------------
# 15. Secrets Management Configuration
# -----------------------------------------------------------------------------
# Secrets backend: env | file | vault | aws | gcp
SECRETS_BACKEND=env

# File-based secrets (if using file backend)
SECRETS_FILE=.secrets.json
SECRETS_ENCRYPT=true
SECRETS_ENCRYPTION_KEY=***REPLACE_WITH_ENCRYPTION_KEY***

# HashiCorp Vault (if using vault backend)
VAULT_URL=http://localhost:8200
VAULT_TOKEN=***REPLACE_WITH_VAULT_TOKEN***
VAULT_PATH=secret/autoops

# AWS Secrets Manager (if using aws backend)
AWS_REGION=us-east-1
AWS_SECRET_NAME=autoops-secrets

# Google Cloud Secret Manager (if using gcp backend)
GCP_PROJECT_ID=your-gcp-project-id

# -----------------------------------------------------------------------------
# 16. Production Security Best Practices
# -----------------------------------------------------------------------------
# IMPORTANT: For production deployments, consider using:
# 1. HashiCorp Vault for centralized secret management
# 2. AWS Secrets Manager or Google Cloud Secret Manager for cloud deployments
# 3. Kubernetes Secrets for container orchestration
# 4. Encrypted environment variables with proper key management
# 5. Regular secret rotation policies
# 6. Audit logging for secret access
# 7. Least privilege access controls
