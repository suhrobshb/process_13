"""
Workflow data-model
===================

This model supports **two representations** of a workflow:

1. Legacy **linear** representation – an ordered list of ``steps``.  
2. Modern **graph** representation – ``nodes`` and ``edges`` generated by the
   visual workflow editor.

The execution engine should prefer *nodes / edges* if present, otherwise fall
back to *steps* for backward-compatibility.

Additional sections:
• ``triggers``  – cron / event / manual trigger definitions.  
• ``approvals`` – human-in-the-loop approval requirements.  
• ``extra_metadata`` – free-form JSON for future extensions.
"""
from datetime import datetime
from typing import Optional, List, Dict
from sqlmodel import SQLModel, Field, JSON, Relationship

class Workflow(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str
    description: Optional[str] = None
    status: str = "draft"  # draft, active, archived
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    # Optional so programmatic tests / scripts can omit it.  In production this
    # should contain the username / service-account that created the workflow.
    created_by: Optional[str] = Field(default=None)

    # ------------------------------------------------------------------ #
    # Representations
    # ------------------------------------------------------------------ #

    # Legacy linear steps (kept for compatibility)
    steps: List[Dict] = Field(
        default_factory=list,
        sa_type=JSON,
        description="Ordered list of step dictionaries for linear workflows.",
    )

    # Visual-editor graph representation
    nodes: List[Dict] = Field(
        default_factory=list,
        sa_type=JSON,
        description="Node definitions from the React Flow editor.",
    )
    edges: List[Dict] = Field(
        default_factory=list,
        sa_type=JSON,
        description="Edge definitions from the React Flow editor.",
    )
    triggers: List[Dict] = Field(default=[], sa_type=JSON)
    approvals: List[Dict] = Field(default=[], sa_type=JSON)
    extra_metadata: Dict = Field(default={}, sa_type=JSON) 